@page "/"

@attribute [Authorize(Roles = "admin")]

@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Data.AzureFunctionResponse
@using Data.Models

@implements IDisposable

@if (_loading)
{
    <div style="position:absolute; top:30vh; width:100%; text-align:center">
        <div style="display:flex; gap:10px; justify-content:center; align-items:center">
            <div class="spinner-border"></div>
            Loading...
        </div>
    </div>
}

@code {
    [CascadingParameter] public Client.States.States State { get; set; } = new();
    readonly Action<SnackbarOptions> config = (SnackbarOptions options) =>
     {
         options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
         options.ShowCloseIcon = true;
     };

    bool _loading;
    bool _showPublishedAddsOnly = true;
    string LoggedInUser = string.Empty;

    protected override void OnParametersSet() => State.OnThemeChanged += HandleEvent;
    void IDisposable.Dispose() => State.OnThemeChanged -= HandleEvent;
    async Task HandleEvent() => await Task.CompletedTask;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SnackbarService.Clear();

#if !DEBUG
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity == null || !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/.auth/login/aad", true);
                return;
            }

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                LoggedInUser = user.Identity.Name;
            }

#else
    await Task.CompletedTask;
#endif

            _loading = true;
        }
        catch (Exception ex)
        {
            SnackbarService.Add(ex.Message, Severity.Error, configure: config);
        }
        finally
        {
            _loading = false;
        }
    }
}

