@page "/"

@attribute [Authorize(Roles = "admin")]

@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Data.AzureFunctionResponse
@using Data.Models

<MudToolBar>
   <MudDatePicker Variant="Variant.Text" Margin="Margin.Dense" Label="From" @bind-Date="@FilterStartDate" Style="text-decoration: none;width:fit-content;" ShowToolbar="false" DateFormat="dd MMM yyyy" FirstDayOfWeek="DayOfWeek.Monday" PickerVariant="PickerVariant.Dialog"  />
        <MudDatePicker Variant="Variant.Text" Margin="Margin.Dense"  Label="Until" @bind-Date="@FilterEndDate" Style="text-decoration: none;width:fit-content;" ShowToolbar="false" DateFormat="dd MMM yyyy" FirstDayOfWeek="DayOfWeek.Monday" PickerVariant="PickerVariant.Dialog" />
        <MudTooltip Text="Reload" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="LoadData" />
        </MudTooltip>
        <MudTooltip Text="Add new bonus" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@(() => OpenForm(NewItem))" />
        </MudTooltip>
        <MudTooltip Text="Staging area" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.Preview" OnClick="OpenTestSite" />
        </MudTooltip>
        <MudTooltip Text="Display changelogs" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.History" OnClick="OpenChangeLogs" />
        </MudTooltip>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>

</MudToolBar>

<MudDataGrid @ref="@MudDataGridRef" Loading="@_loading" LoadingProgressColor="MudBlazor.Color.Info" Items="@Adds"
             Filterable Dense Striped Bordered Hover Square Outlined Virtualize FixedHeader FixedFooter
             QuickFilter="@_quickFilter"
             FilterMode="DataGridFilterMode.ColumnFilterMenu" ColumnResizeMode="ResizeMode.Column">
    <Columns>
        <TemplateColumn CellClass="d-flex justify-start" StickyLeft>
            <CellTemplate>
                <MudTooltip Arrow Placement="Placement.Right" TooltipContent="@(GetTooltipText(context.Item))">
                    <MudStack Row>
                        <MudIconButton OnClick="@(() => OpenForm(context.Item))" Icon="@Icons.Material.Filled.Edit" />
                        <MudIconButton OnClick="@(() => DeleteItem(context.Item))" Icon="@Icons.Material.Filled.Delete" Color="MudBlazor.Color.Error" />
                    </MudStack>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.AddPlacementZone" Title="Add placement zone" />
        <PropertyColumn Property="x => x.LabelText" Title="Text" />
        <PropertyColumn Property="x => x.ImageFileName" Title="Image" CellStyle="text-overflow: hidden;white-space: nowrap;text-wrap: nowrap;" />
        <PropertyColumn Property="x => x.RedirectUrl" Title="Redirect URL" CellStyle="text-overflow: hidden;white-space: nowrap;text-wrap: nowrap;" />
        <PropertyColumn Property="x => x.ActiveFrom" Title="From" Format="dd MMM yyyy" />
        <PropertyColumn Property="x => x.ActiveUntil" Title="Until" Format="dd MMM yyyy" />
        <PropertyColumn Property="@(x => x.IsActive ? "Yes" : "No")" Title="Active?" />
        <PropertyColumn Property="@(x => x.IsPublished ? "Yes" : "No")" Title="Published?" />
        <PropertyColumn Property="x => x.DisplayOrder" Title="Display order" />
        <PropertyColumn Property="x => x.DesktopClickCount" Title="Desktop click count" />
        <PropertyColumn Property="x => x.MobileTapCount" Title="Mobile tap count" />
        <TemplateColumn CellClass="d-flex justify-end" StickyRight>
            <CellTemplate>
                <MudTooltip Arrow TooltipContent="@(GetTooltipText(context.Item))">
                    <MudStack Row>
                        <MudImage ObjectPosition="ObjectPosition.Center" ObjectFit="@ObjectFit.Fill" Width="75" Height="25" Src="@context.Item.ImageBlobUrl"></MudImage>
                        <MudIconButton Href="@context.Item.RedirectUrl" Target="_blank" Icon="@Icons.Material.Filled.Link" Size="MudBlazor.Size.Small" />
                    </MudStack>
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Add" />
    </PagerContent>
</MudDataGrid>

@code {
    readonly Action<SnackbarOptions> config = (SnackbarOptions options) =>
     {
         options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
         options.ShowCloseIcon = true;
     };

    MudDataGrid<Add> MudDataGridRef = new();
    DateTime? FilterStartDate = DateTime.Now.AddMonths(-1);
    DateTime? FilterEndDate = DateTime.Now.AddMonths(1);
    bool _autoClose;
    bool _loading;
    string _searchString = string.Empty;
    string LoggedInUser = string.Empty;
    Add NewItem = new Add { Id = -1, LabelText = string.Empty, RedirectUrl = string.Empty, ImageBlobName = string.Empty, ImageFileName = string.Empty, ImageAsBase64String = string.Empty, AddPlacementZone = "Top", IsActive = true, IsPublished = false, DisplayOrder = 1, ActiveFrom = DateTime.Now, ActiveUntil = DateTime.Now, DesktopClickCount = 0, MobileTapCount = 0 };
    IEnumerable<Add> Adds = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SnackbarService.Clear();

#if !DEBUG
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity == null || !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/.auth/login/aad", true);
                return;
            }

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                LoggedInUser = user.Identity.Name;
            }
#endif

            _loading = true;
            await LoadData();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            SnackbarService.Add(ex.Message, Severity.Error, configure: config);
        }
        finally
        {
            _loading = false;
        }
    }

    private Func<Add, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.AddPlacementZone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LabelText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.RedirectUrl.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ImageFileName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.DisplayOrder.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    RenderFragment GetTooltipText(Add item)
    {
        return AddContent(new MarkupString($"<p style='word-wrap: normal;padding: 0;text-align: left;overflow: hidden;'>Redirect url: {item.RedirectUrl}</p>"));

        RenderFragment AddContent(MarkupString value) => builder =>
        {
            builder.AddContent(1, value);
        };
    }

    async Task OpenLink(Add item) => await JSRuntime.InvokeVoidAsync("open", item.RedirectUrl, "_blank");

    async Task OpenForm(Add item)
    {
#if DEBUG
    item.User = "Debugger";
#else
        item.User = LoggedInUser;
#endif

        var parameters = new DialogParameters
         {
             { "SelectedItem", item },
         };

        var options = new MudBlazor.DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = false,
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.Medium,
                BackdropClick = false,
            };

        var result = await DialogService.Show<AddForm>($"Item: {item.LabelText}", parameters, options).Result;
        if (result is not null && !result.Canceled)
        {
            if (result.Data is true)
            {
                await LoadData();
            }
        }
    }

    async Task DeleteItem(Add item)
    {
        var parameters = new DialogParameters
     {
         { "Item", ("Confirm deletion!", $"Are you sure you want to delete bonus id {item.Id}? Text: '{item.LabelText}'.", "Yes, delete it!", "No, abort", @Icons.Material.Filled.Delete, @Icons.Material.Filled.Cancel) },
     };

        var options = new MudBlazor.DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = false,
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                NoHeader = true,
            };

        var result = await DialogService.Show<ConfirmationDialog>($"Item: {item.LabelText}", parameters, options).Result;
        if (result is not null && !result.Canceled)
        {
            if (result.Data is true)
            {
                await DeleteDataAsync(item);
                await LoadData();
                SnackbarService.Add($"Bonus {item.Id} has been deleted!", Severity.Success, configure: config);
            }
            else
            {
                SnackbarService.Add($"Bonus {item.Id} could not be deleted due to an unknown error!", Severity.Error, configure: config);
            }
        }

        async Task<bool> DeleteDataAsync(Add item)
        {
            item.User = LoggedInUser;
            var func = AzureFunctions.DeleteAdd.GetName();
            var response = await Http.PostAsJsonAsync(func, item);
            return response.IsSuccessStatusCode;
        }
    }

    async Task OpenChangeLogs()
    {
        var options = new MudBlazor.DialogOptions()
            {
                CloseButton = true,
                CloseOnEscapeKey = false,
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                BackdropClick = false,
            };

        _ = await DialogService.Show<Changelogs>($"Changelogs", new DialogParameters { }, options).Result;
    }

    void OpenTestSite()
    {
        //todo: open staging area
    }

    async Task LoadData()
    {
        var bd = int.Parse($"{FilterStartDate?.Year}{(FilterStartDate?.Month > 9 ? string.Empty : $"0")}{FilterStartDate?.Month}{(FilterStartDate?.Day > 9 ? string.Empty : $"0")}{FilterStartDate?.Day}");
        var ed = int.Parse($"{FilterEndDate?.Year}{(FilterEndDate?.Month > 9 ? string.Empty : $"0")}{FilterEndDate?.Month}{(FilterEndDate?.Day > 9 ? string.Empty : $"0")}{FilterEndDate?.Day}");

        var func = AzureFunctions.GetAdds.GetName();
        var response = await Http.GetStringAsync($"{func}/{bd}/{ed}");

        var data = JsonSerializer.Deserialize<AfrAdd>(response);
        Adds = data?.Value ?? [];
    }
}

