@page "/admin"

@attribute [Authorize(Roles = "admin")]

@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Data.AzureFunctionResponse
@using Data.Models



<MudAppBar>

    <MudText>test</MudText>
    <MudSpacer />

    <AuthorizeView>
        <Authorized>
            <MudAlert Dense NoIcon Variant="MudBlazor.Variant.Text" Square ContentAlignment="HorizontalAlignment.Center">@($"Logged in as {LoggedInUser}")</MudAlert>
            <a href="/logout?post_logout_redirect_uri=/">[ Logout ]</a>
        </Authorized>
        <NotAuthorized>
            <MudTooltip Text="Login" Arrow>
                <MudIconButton Icon="@Icons.Material.Filled.Login" OnClick="@(() => NavigationManager.NavigateTo("/.auth/login/aad", true))" />
            </MudTooltip>
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>


@code {
    readonly Action<SnackbarOptions> config = (SnackbarOptions options) =>
     {
         options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
         options.ShowCloseIcon = true;
     };

    bool _loading;
    string LoggedInUser = string.Empty;
    IEnumerable<Add> Adds = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SnackbarService.Clear();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity == null || !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/.auth/login/aad", true);
            }

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                LoggedInUser = user.Identity.Name;
            }
        }
        catch (Exception ex)
        {
            SnackbarService.Add(ex.Message, Severity.Error, configure: config);
        }
        finally
        {
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     try
    //     {
    //         _loading = true;
    //         //await GetAddsAsync();
    //         //await SendDataAsync();
    //         await Task.Delay(3000);
    //     }
    //     finally
    //     {
    //         _loading = false;
    //     }
    // }

    // async Task GetAddsAsync()
    // {
    //     var func = AzureFunctions.GetAdds.GetName();
    //     var response = await Http.GetStringAsync($"{func}/{State}");
    //     var data = JsonSerializer.Deserialize<AfrAdd>(response);
    //     Adds = data?.Value ?? [];
    // }

    // private string inputValue = string.Empty;
    // private string resultMessage = string.Empty;

    // private async Task SendDataAsync()
    // {
    //     var add = new Add { Id = -1, TagText = "DJ$", LogoFile = "DJ$$$", ImageFile = "DJ$$$$", IsDiscontinued = false };
    //     var response = await Http.PostAsJsonAsync("api/FunctionAddAdd", add);

    //     if (response.IsSuccessStatusCode)
    //     {
    //         //var result = await response.Content.ReadFromJsonAsync<dynamic>();
    //         //resultMessage = result?.result ?? "Success";
    //     }
    //     else
    //     {
    //         resultMessage = "Error executing stored procedure.";
    //     }
    // }
}

