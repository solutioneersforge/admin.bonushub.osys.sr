@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Data.AzureFunctionResponse
@using Data.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IStringLocalizer<Resource> Localizer
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

<MudDialog Style="min-width:350px">
    <DialogContent>
        <MudStack Row>
            <MudStack Spacing="0">
                <MudText Align="MudBlazor.Align.Center" Typo="Typo.caption">@Localizer["Slot"]</MudText>
                <MudAlert ContentAlignment="HorizontalAlignment.Center" Square NoIcon Dense Variant="Variant.Outlined">@SelectedItem.AddPlacementZone</MudAlert>
            </MudStack>

            <MudStack Spacing="0">
                <MudText Align="MudBlazor.Align.Center" Typo="Typo.caption">@Localizer["Rank"]</MudText>
                <MudAlert ContentAlignment="HorizontalAlignment.Center" Square NoIcon Dense Variant="Variant.Outlined" OnClick="PickRank">@SelectedItem.DisplayOrder</MudAlert>
            </MudStack>

            <center>
                @if (SaveInProgress)
                {
                    <div class="wrapper" style="margin-top:25px"><CameraLoading Size="30" /></div>
                }
                else
                {
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadImageFile" AppendMultipleFiles="false" Accept=".png, .apng, .jpg, .jpeg, .jpe, .jif, .jfif, .svg, .webp, .bmp, .tif, .tiff, .avif, .xbm" Required>
                        <ActivatorContent>
                            <MudIconButton Color="MudBlazor.Color.Info" Style="margin-top:25px" Size="MudBlazor.Size.Small"
                                           Icon="@Icons.Material.Filled.PhotoCamera">
                            </MudIconButton>
                        </ActivatorContent>
                    </MudFileUpload>
                }
            </center>
        </MudStack>

        <center>
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadImageFile" AppendMultipleFiles="false" Accept=".png, .apng, .jpg, .jpeg, .jpe, .jif, .jfif, .svg, .webp, .bmp, .tif, .tiff, .avif, .xbm" Required>
                <ActivatorContent>
                    <MudImage Style="@($"background-color: {SelectedItem.ImageBgColor};margin:5px;")"
                              hidden="@(string.IsNullOrEmpty(SelectedImageSrc))" Fluid
                              ObjectPosition="ObjectPosition.Center" ObjectFit="@ObjectFit.Fill"
                              Src="@SelectedImageSrc" Alt="@SelectedItem.LabelText" Elevation="25"
                              Width="@ImageDimensions.MaxWidth"
                              Height="@ImageDimensions.MaxHeight"
                              Class="rounded-lg" />
                </ActivatorContent>
            </MudFileUpload>
        </center>

        <MudColorPicker ShowToolbar="true" Label="@Localizer["Image background color"]" PickerVariant="PickerVariant.Dialog" @bind-Text="@SelectedItem.ImageBgColor" />
        <MudTextField @bind-Value="@SelectedItem.LabelText" Label="@Localizer["Text"]" Required Variant="Variant.Text" Margin="Margin.Dense" />
        <MudTextField @bind-Value="@SelectedItem.BonusAmountText" Label="@Localizer["Amount"]" Variant="Variant.Text" Margin="Margin.Dense" />
        <MudTextField @bind-Value="@SelectedItem.FontFamily" Label="@Localizer["Font"]" InputMode="InputMode.numeric" Required Variant="Variant.Text" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="@MudBlazor.Color.Default" OnAdornmentClick="PickFont" />
        <MudTextField @bind-Value="@SelectedItem.FontSize" Label="@Localizer["Font size"]" InputMode="InputMode.numeric" Required Variant="Variant.Text" Margin="Margin.Dense" />
        <MudTextField @bind-Value="@SelectedItem.RedirectUrl" Label="@Localizer["Redirect URL"]" Required AutoFocus Margin="Margin.Dense" />
        <MudSwitch Label="@(SelectedItem.IsPublished ? Localizer["Published"] : Localizer["Not published"])" Size="MudBlazor.Size.Medium" @bind-Value="@SelectedItem.IsPublished" ThumbIcon="@(SelectedItem.IsPublished ? @Icons.Material.Filled.Add : @Icons.Material.Filled.Remove)"
                   ThumbIconColor="@(SelectedItem.IsPublished ? MudBlazor.Color.Success : MudBlazor.Color.Error)" />
    </DialogContent>
    <DialogActions>
        <MudIconButton Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Restore" Color="MudBlazor.Color.Info" OnClick="Reset" Disabled="@SaveInProgress" />
        <MudSpacer />
        <MudIconButton Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Info" OnClick="Done" Disabled="@SaveInProgress" />
        <MudIconButton Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Cancel" Color="MudBlazor.Color.Error" OnClick="Cancel" />
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [CascadingParameter] public Client.States.States State { get; set; } = new();

    [Parameter] public Add SelectedItem { get; set; } = new();
    [Parameter] public int LastRankNumber { get; set; }
    [Parameter] public IEnumerable<int> UnavailableRanks { get; set; } = [];

    readonly Action<SnackbarOptions> config = (SnackbarOptions options) =>
    {
        options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        options.ShowCloseIcon = true;
        options.HideIcon = true;
    };

    IBrowserFile ImageFile = null!;
    Add BackupCopyItem { get; set; } = new();

    string SelectedImageSrc = string.Empty;
    string LoggedInUser = string.Empty;
    string ImageLimitationText = string.Empty;
    string default_image = "default_image";
    string default_image_fileextention = ".png";
    string ImageBlobNameGuid = string.Empty;
    string AzureStorageContainerPath = string.Empty;

    bool SaveInProgress = false; bool DoNotCloseForm = false;
    int NumberOfNewItemsSaved;
    CancellationTokenSource AbortTokenSource = new();
    List<int> AvailableRanks = [];
    ImageDimension ImageDimensions = new();
    int ImageMaxFilesize = 10;
    long MaxFileSize = 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;

        AzureStorageContainerPath = await LocalStorage.GetItemAsync<string>(Settings.AzureStorageContainerPath.GetDescription()) ?? string.Empty;
        if (!string.IsNullOrEmpty(AzureStorageContainerPath))
        {
            SelectedImageSrc = $"{AzureStorageContainerPath}{default_image}{default_image_fileextention}";
        }

        var jsonString = await LocalStorage.GetItemAsync<string>(Settings.ImageDimensions.GetDescription());
        if (!string.IsNullOrEmpty(jsonString))
        {
            ImageDimensions = JsonSerializer.Deserialize<ImageDimension>(jsonString) ?? new();
        }

        jsonString = await LocalStorage.GetItemAsync<string>(Settings.ImageMaxFilesize.GetDescription());
        if (!string.IsNullOrEmpty(jsonString))
        {
            ImageMaxFilesize = JsonSerializer.Deserialize<int>(jsonString);
            if (ImageMaxFilesize <= 0)
            {
                ImageMaxFilesize = 10;
            }
        }
        MaxFileSize = ImageMaxFilesize * MaxFileSize;

        jsonString = await LocalStorage.GetItemAsync<string>(Settings.AllowedAddsRangePerSlot.GetDescription());
        if (!string.IsNullOrEmpty(jsonString))
        {
            var ranges = JsonSerializer.Deserialize<List<AllowedAddsRange>>(jsonString);
            if (ranges is not null)
            {
                var ranksRange = ranges.FirstOrDefault(x => x.Slot.ToLower() == SelectedItem.AddPlacementZone.ToLower());
                if (ranksRange is null) return;

                var min = ranksRange.MinimumAdds <= 0 ? 1 : ranksRange.MinimumAdds;
                var max = ranksRange.MaximumAdds;
                var ranks = Enumerable.Range(min, max).Except(UnavailableRanks).ToList();
                if (SelectedItem.Id > 0)
                {
                    AvailableRanks.AddRange(ranks.Concat(new[] { SelectedItem.DisplayOrder }).OrderBy(x => x));
                    return;
                }
                AvailableRanks.AddRange(ranks.OrderBy(x => x));
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (SelectedItem.Id > 0)
        {
            SelectedImageSrc = SelectedItem.ImageBlobUrl;
            ImageBlobNameGuid = Path.GetFileNameWithoutExtension(SelectedItem.ImageBlobName);
        }
        else
        {
            ImageBlobNameGuid = Guid.NewGuid().ToString();
            SelectedItem.ImageFileName = $"{default_image}{default_image_fileextention}";
            SelectedItem.ImageBlobName = $"{default_image}{default_image_fileextention}";
        }
        LoggedInUser = SelectedItem.User;
        BackupCopyItem = new Add
            {
                Id = SelectedItem.Id,
                IsPublished = SelectedItem.IsPublished,
                ImageBlobName = SelectedItem.ImageBlobName,
                ImageBlobUrl = SelectedItem.ImageBlobUrl,
                ActiveFrom = SelectedItem.ActiveFrom,
                ActiveUntil = SelectedItem.ActiveUntil,
                AddPlacementZone = SelectedItem.AddPlacementZone,
                IsActive = SelectedItem.IsActive,
                DisplayOrder = SelectedItem.DisplayOrder,
                ImageFileName = SelectedItem.ImageFileName,
                LabelText = SelectedItem.LabelText,
                BonusAmountText = SelectedItem.BonusAmountText,
                FontFamily = SelectedItem.FontFamily,
                FontSize = SelectedItem.FontSize,
                ImageBgColor = SelectedItem.ImageBgColor,
                RedirectUrl = SelectedItem.RedirectUrl
            };
    }

    async Task UploadImageFile(IBrowserFile file)
    {
        if (file is not null)
        {
            if (file.Size > MaxFileSize)
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["The file size of the image exceeds the limit of"]} {ImageMaxFilesize} MB!", Severity.Info, configure: config);
                return;
            }

            try
            {
                SaveInProgress = true;
                ImageFile = file;
                SelectedItem.ImageFileName = ImageFile.Name;
                SelectedItem.ImageBlobName = $"{ImageBlobNameGuid}{Path.GetExtension(ImageFile.Name)}";
                using (var stream = ImageFile.OpenReadStream(maxAllowedSize: MaxFileSize))
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        byte[] imageBytes = memoryStream.ToArray();
                        SelectedImageSrc = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";

                        var ResizedImageDataUrl = await JSRuntime.InvokeAsync<string>(
                            "resizeImageFromBase64",
                            SelectedImageSrc,
                            ImageDimensions.MinWidth,
                            ImageDimensions.MinHeight,
                            ImageDimensions.MaxWidth,
                            ImageDimensions.MaxHeight
                        );

                        if (!string.IsNullOrEmpty(ResizedImageDataUrl))
                        {
                            SelectedImageSrc = ResizedImageDataUrl;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                SnackbarService.Clear();
                SnackbarService.Add(ex.Message, Severity.Error, configure: config);
            }
            finally
            {
                SaveInProgress = false;
            }
        }
    }

    async Task Done()
    {
        try
        {
            SaveInProgress = true;

            if (string.IsNullOrEmpty(SelectedItem.LabelText))
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["Please provide a text for the add."]}", Severity.Info, configure: config);
                return;
            }

            if (string.IsNullOrEmpty(SelectedItem.RedirectUrl))
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["The redirect URL is missing!"]}", Severity.Info, configure: config);
                return;
            }

            if (!SelectedItem.RedirectUrl.StartsWith("http"))
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["The redirect URL must start with"]}", Severity.Info, configure: config);
                return;
            }

            if (string.IsNullOrEmpty(SelectedImageSrc))
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["No image has been selected!"]}", Severity.Info, configure: config);
                return;
            }

            if (FixedItems.AllowedImageExtensions.Split(",", StringSplitOptions.TrimEntries).FirstOrDefault(x => SelectedItem.ImageFileName.ToLower().EndsWith(x)) is null)
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["Image with the following extensions is allowed:"]} {FixedItems.AllowedImageExtensions}!", Severity.Info, configure: config);
                return;
            }

            if (string.IsNullOrEmpty(SelectedItem.AddPlacementZone))
            {
                SnackbarService.Clear();
                SnackbarService.Add($"{Localizer["Please select a slot to place the image in."]}", Severity.Info, configure: config);
                return;
            }

            CancellationToken cancellationToken = AbortTokenSource.Token;
            if (await SaveDataAsync(cancellationToken))
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (OperationCanceledException)
        {
            SnackbarService.Clear();
            SnackbarService.Add($"{Localizer["Operation cancelled. Changes were not saved."]}", Severity.Info, configure: config);
        }
        catch (Exception ex)
        {
            SnackbarService.Clear();
            SnackbarService.Add(ex.Message, Severity.Error, configure: config);
        }
        finally
        {
            SaveInProgress = false;
        }
    }

    async Task Cancel()
    {
        //when data is being processed then the cancel button functions as an abort operation
        if (SaveInProgress)
        {
            SnackbarService.Clear();
            SnackbarService.Add($"{Localizer["Cancelling..."]}", Severity.Info, configure: config); await AbortTokenSource.CancelAsync();
            return;
        }

        //if form was kept open and user has created multiple item then the list should be reloaded when this form is closed.
        if (NumberOfNewItemsSaved > 0) { MudDialog.Close(DialogResult.Ok(true)); }

        //on cancellation and closing of the form
        Reset(); MudDialog.Close(DialogResult.Cancel());
    }

    void Reset()
    {
        SelectedImageSrc = string.Empty; SelectedItem = BackupCopyItem;
        SelectedItem = new Add
            {
                Id = BackupCopyItem.Id,
                IsPublished = BackupCopyItem.IsPublished,
                ImageBlobName = BackupCopyItem.ImageBlobName,
                ImageBlobUrl = BackupCopyItem.ImageBlobUrl,
                ActiveFrom = BackupCopyItem.ActiveFrom,
                ActiveUntil = BackupCopyItem.ActiveUntil,
                AddPlacementZone = BackupCopyItem.AddPlacementZone,
                IsActive = BackupCopyItem.IsActive,
                DisplayOrder = BackupCopyItem.DisplayOrder,
                ImageFileName = BackupCopyItem.ImageFileName,
                LabelText = BackupCopyItem.LabelText,
                BonusAmountText = BackupCopyItem.BonusAmountText,
                FontFamily = BackupCopyItem.FontFamily,
                FontSize = BackupCopyItem.FontSize,
                ImageBgColor = BackupCopyItem.ImageBgColor,
                RedirectUrl = BackupCopyItem.RedirectUrl
            };
        if (SelectedItem.Id > 0)
        {
            SelectedImageSrc = BackupCopyItem.ImageBlobUrl;
        }
        StateHasChanged();
    }

    async Task PickRank()
    {

        if (AvailableRanks.Count == 0)
        {
            SnackbarService.Clear();
            SnackbarService.Add(string.Format(Localizer["No ranks are available"], SelectedItem.AddPlacementZone), Severity.Info, configure: config);
            return;
        }

        var parameters = new DialogParameters
         {
              { "SelectedItem", SelectedItem.DisplayOrder }, { nameof(AvailableRanks), AvailableRanks }
         };

        var options = new MudBlazor.DialogOptions()
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                BackdropClick = false,
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraSmall,
                BackgroundClass = "bg-blur",
            };

        var dialog = await DialogService.ShowAsync<RankPicker>(string.Empty, parameters, options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            if (result.Data is not null && int.TryParse(result.Data.ToString(), out var rank))
            {
                SelectedItem.DisplayOrder = rank;
            }
        }
    }

    async Task PickFont()
    {
        var parameters = new DialogParameters
         {
              { "SelectedItem", SelectedItem.FontFamily }
         };

        var options = new MudBlazor.DialogOptions()
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                BackdropClick = false,
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraSmall,
                BackgroundClass = "bg-blur",
            };

        var dialog = await DialogService.ShowAsync<FontFamilyPicker>(string.Empty, parameters, options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            var data = result.Data as string;
            SelectedItem.FontFamily = data ?? string.Empty;
        }
    }

    async Task<bool> SaveDataAsync(CancellationToken token)
    {
        if (ImageFile is not null)
        {
            if (!string.IsNullOrEmpty(AzureStorageContainerPath))
            {
                var isImageStored = await StoreImage(token);
                if (!isImageStored)
                {
                    SnackbarService.Clear();
                    SnackbarService.Add(Localizer["The image could not be stored."], Severity.Error, configure: config);
                    return false;
                }
            }
        }

        var func = AzureFunctions.AddAdd.GetName();
        var response = await Http.PostAsJsonAsync(func, SelectedItem, token);
        return response.IsSuccessStatusCode;
    }

    async Task<bool> StoreImage(CancellationToken token)
    {
        SelectedItem.ImageAsBase64String = SelectedImageSrc; //.Replace($"data:{ImageFile.ContentType};base64,", "");
        var func = AzureFunctions.StoreImage.GetName();
        var response = await Http.PostAsJsonAsync(func, SelectedItem, token);

        if (!string.IsNullOrEmpty(AzureStorageContainerPath))
        {
            SelectedItem.ImageBlobUrl = $"{AzureStorageContainerPath}{SelectedItem.ImageBlobName}";
            return await CheckBlobExistsAsync($"{SelectedItem.ImageBlobUrl}");
        }

        return false;
    }

    public async Task<bool> CheckBlobExistsAsync(string blobUrl)
    {
        using (HttpClient httpClient = new())
        {
            HttpResponseMessage response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, blobUrl));

            return response.StatusCode switch
            {
                System.Net.HttpStatusCode.OK => true,
                System.Net.HttpStatusCode.NotFound => false,
                _ => throw new Exception($"{Localizer["Failed to check image existence.Status code:"]} {response.StatusCode}")
            };
        }
    }
}
