@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using Data.AzureFunctionResponse
@using Data.Models
@using Microsoft.AspNetCore.Components.Forms

<MudDialog>
    <DialogContent>
        <MudStack Row Spacing="1" Wrap="Wrap.NoWrap" Justify="Justify.FlexStart">
            <MudNumericField Margin="Margin.Dense" Required Min="1" Step="1" T="int" @bind-Value="@SelectedItem.DisplayOrder" Label="Rank" Immediate Style="width:50px" />
            <MudSwitch @bind-Value="@SelectedItem.IsPublished" ThumbIcon="@(SelectedItem.IsPublished ? @Icons.Material.Filled.Add : @Icons.Material.Filled.Remove)" ThumbIconColor="@(SelectedItem.IsPublished ? MudBlazor.Color.Success : MudBlazor.Color.Error)" />
        </MudStack>

        <div class="d-flex justify-center">
            <MudStack>
                <MudImage hidden="@(string.IsNullOrEmpty(SelectedImageSrc))" Fluid ObjectPosition="ObjectPosition.Center" ObjectFit="@ObjectFit.Fill" Height="200" Width="400" Src="@SelectedImageSrc" Alt="@SelectedItem.LabelText" Elevation="25" Class="rounded-lg" />
                <MudStack Row>
                    @if (SaveInProgress)
                    {
                        <MudProgressCircular Indeterminate Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Info" />
                        <MudAlert Dense NoIcon Square Variant="Variant.Outlined" Severity="MudBlazor.Severity.Info">Uploading...</MudAlert>
                    }
                    else
                    {
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadImageFile" AppendMultipleFiles="false" Accept=".png, .apng, .jpg, .jpeg, .jpe, .jif, .jfif, .svg, .webp, .bmp, .tif, .tiff, .avif, .xbm" Required>
                            <ActivatorContent>
                                <MudIconButton Color="MudBlazor.Color.Info"
                                               Icon="@Icons.Material.Filled.PhotoCamera">
                                </MudIconButton>
                            </ActivatorContent>
                        </MudFileUpload>
                        <MudAlert Dense hidden="@(string.IsNullOrEmpty(@SelectedItem.ImageFileName))" NoIcon Square Variant="Variant.Outlined" Severity="MudBlazor.Severity.Info">@SelectedItem.ImageFileName</MudAlert>
                    }
                </MudStack>
            </MudStack>
        </div>

        <MudColorPicker ShowToolbar="true" Label="Image background color" PickerVariant="PickerVariant.Dialog" @bind-Text="@SelectedItem.ImageBgColor" />
        <MudTextField @bind-Value="@SelectedItem.LabelText" Label="Text" Required Variant="Variant.Text" Margin="Margin.Dense" />
        <MudTextField @bind-Value="@SelectedItem.BonusAmountText" Label="Amount" Variant="Variant.Text" Margin="Margin.Dense" />
        <MudAutocomplete T="string" Label="Font" @bind-Value="@SelectedItem.FontFamily" SearchFunc="@SearchFont"
                         Strict="false" Dense  AdornmentIcon="@Icons.Material.Filled.Search" />
        <MudTextField @bind-Value="@SelectedItem.FontSize" Label="Font size" InputMode="InputMode.numeric" Required Variant="Variant.Text" Margin="Margin.Dense" />
        <MudTextField @bind-Value="@SelectedItem.RedirectUrl" Label="Redirect url" Required AutoFocus Margin="Margin.Dense" />
        <MudSwitch Label="@(SelectedItem.IsPublished ? "Published" : "Not published")" Size="MudBlazor.Size.Medium" @bind-Value="@SelectedItem.IsPublished" ThumbIcon="@(SelectedItem.IsPublished ? @Icons.Material.Filled.Add : @Icons.Material.Filled.Remove)"
                   ThumbIconColor="@(SelectedItem.IsPublished ? MudBlazor.Color.Success : MudBlazor.Color.Error)" />
    </DialogContent>
    <DialogActions>
        <MudIconButton Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Restore" Color="MudBlazor.Color.Info" OnClick="Reset" Disabled="@SaveInProgress" />
        <MudSpacer />
        @if (SelectedItem.Id == -1)
        {
            <MudSwitch Size="MudBlazor.Size.Small" @bind-Value="@DoNotCloseForm" ThumbIcon="@(DoNotCloseForm ? @Icons.Material.Filled.OpenInNew : @Icons.Material.Filled.OpenInNewOff)" ThumbIconColor="@(DoNotCloseForm ? MudBlazor.Color.Success : MudBlazor.Color.Error)">@($"Keep open? {(DoNotCloseForm ? "yes" : "no")}")</MudSwitch>
        }
        <MudIconButton Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Info" OnClick="Done" Disabled="@SaveInProgress" />
        <MudIconButton Size="MudBlazor.Size.Small" Icon="@Icons.Material.Filled.Cancel" Color="MudBlazor.Color.Error" OnClick="Cancel" />
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public Add SelectedItem { get; set; } = new();

    readonly Action<SnackbarOptions> config = (SnackbarOptions options) =>
    {
        options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        options.ShowCloseIcon = true;
    };

    IBrowserFile ImageFile = null!;
    Add BackupCopyItem { get; set; } = new();

    string SelectedImageSrc = string.Empty;
    string LoggedInUser = string.Empty;
    bool SaveInProgress = false; bool DoNotCloseForm = false;
    int NumberOfNewItemsSaved;
    CancellationTokenSource AbortTokenSource = new();

    protected override void OnParametersSet()
    {
        if (SelectedItem.Id > 0)
        {
            SelectedImageSrc = SelectedItem.ImageBlobUrl;
        }
        LoggedInUser = SelectedItem.User;
        BackupCopyItem = new Add { Id = SelectedItem.Id, IsPublished = SelectedItem.IsPublished, ImageBlobName = SelectedItem.ImageBlobName, ImageBlobUrl = SelectedItem.ImageBlobUrl, ActiveFrom = SelectedItem.ActiveFrom, ActiveUntil = SelectedItem.ActiveUntil, AddPlacementZone = SelectedItem.AddPlacementZone, IsActive = SelectedItem.IsActive, DisplayOrder = SelectedItem.DisplayOrder, ImageFileName = SelectedItem.ImageFileName, LabelText = SelectedItem.LabelText, RedirectUrl = SelectedItem.RedirectUrl };
    }

    async Task UploadImageFile(IBrowserFile file)
    {
        if (file is not null)
        {
            ImageFile = file;
            SelectedItem.ImageFileName = ImageFile.Name;
            SelectedItem.ImageBlobName = $"{Guid.NewGuid()}{Path.GetExtension(ImageFile.Name)}";
            using (var stream = ImageFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)) // 10 MB limit
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    byte[] imageBytes = memoryStream.ToArray();
                    SelectedImageSrc = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
                }
            }
        }
    }

    async Task<IEnumerable<string>> SearchFont(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return FontFamilies.WebFriendlyFonts;

        return FontFamilies.WebFriendlyFonts.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task Done()
    {
        try
        {
            SaveInProgress = true;

            if (string.IsNullOrEmpty(SelectedItem.LabelText))
            {
                SnackbarService.Clear();
                SnackbarService.Add("Please provide a text for the add/bonus.", Severity.Info, configure: config);
                return;
            }

            if (string.IsNullOrEmpty(SelectedItem.RedirectUrl))
            {
                SnackbarService.Clear();
                SnackbarService.Add("The redirect URL is missing!", Severity.Info, configure: config);
                return;
            }

            if (!SelectedItem.RedirectUrl.StartsWith("http"))
            {
                SnackbarService.Clear();
                SnackbarService.Add("The redirect URL must start with http:// or https://", Severity.Info, configure: config);
                return;
            }

            if (string.IsNullOrEmpty(SelectedImageSrc))
            {
                SnackbarService.Clear();
                SnackbarService.Add("No image has been selected!", Severity.Info, configure: config);
                return;
            }

            if (FixedItems.AllowedImageExtensions.Split(",", StringSplitOptions.TrimEntries).FirstOrDefault(x => SelectedItem.ImageFileName.ToLower().EndsWith(x)) is null)
            {
                SnackbarService.Clear();
                SnackbarService.Add($"Image with the following extensions is allowed: {FixedItems.AllowedImageExtensions}!", Severity.Info, configure: config);
                return;
            }

            if (string.IsNullOrEmpty(SelectedItem.AddPlacementZone))
            {
                SnackbarService.Clear();
                SnackbarService.Add("Please select a zone to place the image in.", Severity.Info, configure: config);
                return;
            }

            CancellationToken cancellationToken = AbortTokenSource.Token;
            await SaveDataAsync(cancellationToken);
            if (DoNotCloseForm)
            {
                NumberOfNewItemsSaved++;
                ImageFile = null!;
                SelectedImageSrc = string.Empty;
                SelectedItem = new Add { Id = -1, LabelText = string.Empty, RedirectUrl = string.Empty, ImageBlobName = string.Empty, ImageFileName = string.Empty, User = LoggedInUser, ImageAsBase64String = string.Empty, AddPlacementZone = "Top", IsActive = true, IsPublished = false, DisplayOrder = 1, ActiveFrom = DateTime.Now, ActiveUntil = DateTime.Now, DesktopClickCount = 0, MobileTapCount = 0 };
                StateHasChanged();
                return;
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (OperationCanceledException)
        {
            SnackbarService.Clear();
            SnackbarService.Add("Operation cancelled. Changes were not saved.", Severity.Info, configure: config);
        }
        catch (Exception ex)
        {
            SnackbarService.Clear();
            SnackbarService.Add(ex.Message, Severity.Error, configure: config);
        }
        finally
        {
            SaveInProgress = false;
        }
    }

    async Task Cancel()
    {
        //when data is being processed then the cancel button functions as an abort operation
        if (SaveInProgress)
        {
            SnackbarService.Clear();
            SnackbarService.Add("Cancelling...", Severity.Info, configure: config); await AbortTokenSource.CancelAsync();
            return;
        }

        //if form was kept open and user has created multiple item then the list should be reloaded when this form is closed.
        if (NumberOfNewItemsSaved > 0) { MudDialog.Close(DialogResult.Ok(true)); }

        //on cancellation and closing of the form
        Reset(); MudDialog.Close(DialogResult.Cancel());
    }

    void Reset()
    {
        SelectedImageSrc = string.Empty; SelectedItem = BackupCopyItem;
        SelectedItem = new Add { Id = BackupCopyItem.Id, IsPublished = BackupCopyItem.IsPublished, ImageBlobName = BackupCopyItem.ImageBlobName, ImageBlobUrl = BackupCopyItem.ImageBlobUrl, ActiveFrom = BackupCopyItem.ActiveFrom, ActiveUntil = BackupCopyItem.ActiveUntil, AddPlacementZone = BackupCopyItem.AddPlacementZone, IsActive = BackupCopyItem.IsActive, DisplayOrder = BackupCopyItem.DisplayOrder, ImageFileName = BackupCopyItem.ImageFileName, LabelText = BackupCopyItem.LabelText, RedirectUrl = BackupCopyItem.RedirectUrl };
        if (SelectedItem.Id > 0)
        {
            SelectedImageSrc = BackupCopyItem.ImageBlobUrl;
        }
        StateHasChanged();
    }

    async Task OpenDateRangePickerDialog()
    {
        var parameters = new DialogParameters
         {
              { "StartDate", SelectedItem.ActiveFrom }, { "EndDate", SelectedItem.ActiveUntil }
         };

        var options = new MudBlazor.DialogOptions()
            {
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraSmall,
                BackgroundClass = "bg-blur",
                NoHeader = true,
            };

        var dialog = await DialogService.ShowAsync<DateRangePickerDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            var data = result.Data as DateTime?[];
            if (data is null || data.Length < 2 || !data[0].HasValue || !data[1].HasValue) return;

            SelectedItem.ActiveFrom = data[0] ?? SelectedItem.ActiveFrom;
            SelectedItem.ActiveUntil = data[1] ?? SelectedItem.ActiveUntil;
        }
    }

    async Task OpenPlacementZonePickerDialog()
    {
        var parameters = new DialogParameters
         {
              { "PlacementZone", SelectedItem.AddPlacementZone }
         };

        var options = new MudBlazor.DialogOptions()
            {
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "bg-blur",
                NoHeader = true,
            };

        var dialog = await DialogService.ShowAsync<PlacementZonePickerDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            var data = result.Data as string;

            SelectedItem.AddPlacementZone = data;
        }
    }

    async Task<bool> SaveDataAsync(CancellationToken token)
    {
        /*
         * do not check whether image is stored or not
         * as sometimes user would want to edit other information than changing the image
         * in this case ImageFile will be null
         */
        await StoreImage(token);
        var func = AzureFunctions.AddAdd.GetName();
        var response = await Http.PostAsJsonAsync(func, SelectedItem, token);
        return response.IsSuccessStatusCode;
    }

    async Task<bool> StoreImage(CancellationToken token)
    {
        if (ImageFile is null) return false;
        SelectedItem.ImageAsBase64String = SelectedImageSrc.Replace($"data:{ImageFile.ContentType};base64,", "");
        var func = AzureFunctions.StoreImage.GetName();
        var response = await Http.PostAsJsonAsync(func, SelectedItem, token);
        return response.IsSuccessStatusCode;
    }
}
